Object subclass: #MyShape	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IZ-mmn11-q1'!!MyShape commentStamp: 'IZ 12/23/2023 14:13' prior: 0!A MyShape is a 2D abstract geometric shapeInstance Variables!!MyShape methodsFor: 'comparing' stamp: 'IZ 12/23/2023 13:40'!= aShape	"checking a given shape is in Geometric Congruence"	self subclassResponsibility.! !!MyShape methodsFor: 'comparing' stamp: 'IZ 12/23/2023 16:50'!hash	"Hash is needed for = ."	^self subclassResponsibility.! !!MyShape methodsFor: 'getting' stamp: 'IZ 12/23/2023 13:38'!area	"get shape area"	self subclassResponsibility.! !!MyShape methodsFor: 'getting' stamp: 'IZ 12/23/2023 13:38'!perimeter	"get shape perimeter"	self subclassResponsibility.! !MyShape subclass: #MyRectangle	instanceVariableNames: 'width length'	classVariableNames: ''	poolDictionaries: ''	category: 'IZ-mmn11-q1'!!MyRectangle commentStamp: 'IZ 12/23/2023 14:14' prior: 0!A MyRectangle is a MyShape representing a rectangle.Instance Variables	length:		the lenght of the rectangle	width:		the width: of the rectanglelength	- xxxxxwidth	- xxxxx!!MyRectangle methodsFor: 'accessing' stamp: 'IZ 12/23/2023 13:53'!length: newlength	"set length"	(newlength <=0 )		ifTrue: [^self error: 'bad input of length, must be > 0'].		length := newlength! !!MyRectangle methodsFor: 'accessing' stamp: 'IZ 12/23/2023 13:53'!width: newWidth	"set width"	(newWidth <=0 )		ifTrue: [^self error: 'bad input of width, must be > 0'].		width := newWidth! !!MyRectangle methodsFor: 'initialize-release' stamp: 'IZ 12/23/2023 14:00'!initialize	"new object"		width := 0.	length := 0.! !!MyRectangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 13:54'!area	"calculate the area of the rectangle"	^length*width! !!MyRectangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 13:49'!length	"get rectangle length"	^length! !!MyRectangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 13:55'!perimeter	"calculate the perimeter of the rectangle"	^(length+width)*2! !!MyRectangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 18:36'!print: name	"pretty print"      Transcript show: (self class name, ' instance name: ', name asString);cr .      Transcript show: ('spec: ', width asString, 'x' , length asString);cr .       Transcript show:  ('perimter: ', self perimeter asString);cr.       Transcript show:  ('area: ', self area asString);cr.! !!MyRectangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 13:48'!width	"get rectangle width"	^width! !!MyRectangle methodsFor: 'comparing' stamp: 'IZ 12/23/2023 17:39'!= aShape	"comparing rectangles"	(aShape isMemberOf: MyRectangle)	ifTrue: [		((aShape length = length) and: (aShape width = width))			ifTrue: [^true]			ifFalse: [				((aShape length = width ) and: (aShape width = length))					ifTrue: [^true]					ifFalse: [^false].			].	]	ifFalse: [^false].! !!MyRectangle methodsFor: 'comparing' stamp: 'IZ 12/23/2023 16:51'!hash	"Hash is needed for = ."	^(width hash hashMultiply + length hash) hashMultiply! !MyShape subclass: #MyTriangle	instanceVariableNames: 'd1 d2 d3'	classVariableNames: ''	poolDictionaries: ''	category: 'IZ-mmn11-q1'!!MyTriangle commentStamp: 'IZ 12/23/2023 14:17' prior: 0!A MyTriangle is a MyShape representing a triangle.Instance Variables	d1:		first side	d2:		second side	d3:		third sided1	- xxxxxd2	- xxxxxd3	- xxxxx!!MyTriangle methodsFor: 'accessing' stamp: 'IZ 12/23/2023 14:22'!area	"get triangle area"	|s|	s := (d1+d2+d3)/2.	^(s* (s - d1) * (s - d2) * (s - d3)) sqrt.! !!MyTriangle methodsFor: 'accessing' stamp: 'IZ 12/23/2023 14:39'!d1: d1Val	"set d1 size"	(d1Val<=0)		ifTrue: [^self error: 'bad input for d1 size'].	d1 := d1Val.! !!MyTriangle methodsFor: 'accessing' stamp: 'IZ 12/23/2023 14:39'!d2: d2Val	"set d2 size"	(d2Val<=0)		ifTrue: [^self error: 'bad input for d2 size'].	d2 := d2Val.! !!MyTriangle methodsFor: 'accessing' stamp: 'IZ 12/23/2023 14:39'!d3: d3Val	"set d3 size"	(d3Val<=0)		ifTrue: [^self error: 'bad input for d3 size'].	d3 := d3Val.! !!MyTriangle methodsFor: 'accessing' stamp: 'IZ 12/23/2023 14:21'!perimeter	"get triangle perimeter"	^(d1+d2+d3)! !!MyTriangle methodsFor: 'initialize-release' stamp: 'IZ 12/23/2023 16:37'!initialize	"new object"		d1 := 0.	d2 := 0.	d3 := 0.! !!MyTriangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 14:19'!d1	"get first side"	^d1	! !!MyTriangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 14:19'!d2	"get second side"	^d2! !!MyTriangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 14:19'!d3	"get third side"	^d3! !!MyTriangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 18:34'!print	"pretty print"      Transcript show: (self class name);cr .      Transcript show: ('spec: ', d1 asString, 'x' , d2 asString, 'x', d3 asString);cr .       Transcript show:  ('perimter: ', self perimeter asString);cr.       Transcript show:  ('area: ', self area asString);cr.! !!MyTriangle methodsFor: 'getting' stamp: 'IZ 12/23/2023 18:35'!print: name	"pretty print"      Transcript show: (self class name, ' instance name: ', name asString);cr .      Transcript show: ('spec: ', d1 asString, 'x' , d2 asString, 'x', d3 asString);cr .       Transcript show:  ('perimter: ', self perimeter asString);cr.       Transcript show:  ('area: ', self area asString);cr.! !!MyTriangle methodsFor: 'comparing' stamp: 'IZ 12/23/2023 18:48'!= otherShape	"compare giving triangle to self if given rect is indeed a triangle"	(otherShape isMemberOf: MyTriangle)		ifTrue: [			((otherShape d1=d1) and: (otherShape d2 = d2) and: (otherShape d3 = d3))			ifTrue: [^true]			ifFalse: [				((otherShape d1=d1) and: (otherShape d2 = d3) and: (otherShape d3 = d2))				ifTrue: [^true]				ifFalse: [					((otherShape d1=d3) and: (otherShape d2 = d2) and: (otherShape d3 = d1))					ifTrue: [^true]					ifFalse: [						((otherShape d1=d2) and: (otherShape d2 = d1) and: (otherShape d3 = d3))						ifTrue: [^true]						ifFalse: [							((otherShape d1=d2) and: (otherShape d2 = d3) and: (otherShape d3 = d1))							ifTrue: [^true]							ifFalse: [								((otherShape d1=d3) and: (otherShape d2 = d1) and: (otherShape d3 = d2))								ifTrue: [^true]								ifFalse: [^false].								].						].					].				].			].		]		ifFalse: [^false].! !!MyTriangle methodsFor: 'comparing' stamp: 'IZ 12/23/2023 16:52'!hash	"Hash is needed for = ."	^((d1 hash hashMultiply + d2 hash) hashMultiply + d3 hash) hashMultiply! !TestCase subclass: #TestMyRectangle	instanceVariableNames: 'r1 r2 r3'	classVariableNames: ''	poolDictionaries: ''	category: 'IZ-mmn11-q1'!!TestMyRectangle methodsFor: 'testing' stamp: 'IZ 12/23/2023 18:49'!setUp	"setUp tests for my rect"	Transcript clear.	Transcript show:'Running Rect Tests!!!!!!!!!!!!!!!!';cr.	r1 := MyRectangle new.	r1		width: 6;		length: 7.	r1 print: 'r1'.	r2 := MyRectangle new.	r2		width: 4;		length: 5.	r2 print: 'r2'.	r3 := MyRectangle new.	r3		width: 7;		length: 6.	r3 print: 'r3'.		! !!TestMyRectangle methodsFor: 'testing' stamp: 'IZ 12/23/2023 18:50'!testAdd	"asserting real tests for rectangle!!"	Transcript show:'Running basic init Rect Tests!!!!!!!!!!!!!!!!';cr.	self assert: ((r1 width ) = 6 ) description: 'Error in MyRectangle Init'.	self assert: ((r2 width ) = 4 ) description: 'Error in MyRectangle Init'.	Transcript show:'Running calc Rect Tests!!!!!!!!!!!!!!!!';cr.	self assert: ((r3 area) = 42) description: 'Error in MyRectangle area!!!!'.	self assert: ((r2 perimeter) = 18) description: 'Error in MyRectangle perimeter!!!!'.	Transcript show:'Running compare Rect Tests!!!!!!!!!!!!!!!!';cr.	self assert: (r1 = r3) description: 'Error in comparing MyRectangle!!!!'.	Transcript show:'All Tests Completed!!!!!!!!!!!!!!!!';cr.! !TestCase subclass: #TestMyTriangle	instanceVariableNames: 't1 t2 t3'	classVariableNames: ''	poolDictionaries: ''	category: 'IZ-mmn11-q1'!!TestMyTriangle methodsFor: 'testing' stamp: 'IZ 12/23/2023 18:52'!setUp	"setUp tests for my rect"	Transcript clear.	Transcript show:'Running Prism Tests!!!!!!!!!!!!!!!!';cr.	t1 := MyTriangle new.	t1		d1: 3;		d2: 4;		d3: 5.	t1 print: 't1'.	t2 := MyTriangle new.	t2		d1: 4;		d2: 5;		d3: 3.	t2 print: 't2'.	t3 := MyTriangle new.	t3		d1: 5;		d2: 6;		d3: 7.	t3 print: 't3'.		! !!TestMyTriangle methodsFor: 'testing' stamp: 'IZ 12/23/2023 18:51'!testAdd	"asserting real tests for triangle!!"	Transcript show:'Running basic init Triangle Tests!!!!!!!!!!!!!!!!';cr.	self assert: ((t1 d3 ) = 5 ) description: 'Error in MyTriangle Init'.	self assert: ((t2 d2 ) = 5 ) description: 'Error in MyTriangle Init'.	self assert: ((t3 d1 ) = 5 ) description: 'Error in MyTriangle Init'.	Transcript show:'Running calc Triangle Tests!!!!!!!!!!!!!!!!';cr.	self assert: ((t1 area) = 6) description: 'Error in MyTriangle area!!!!'.	self assert: ((t2 perimeter) = 12) description: 'Error in MyTriangle perimeter!!!!'.	Transcript show:'Running compare Triagnle Tests!!!!!!!!!!!!!!!!';cr.	self assert: (t1 = t2) description: 'Error in comparing MyTriangle!!!!'.	Transcript show:'All Tests Completed!!!!!!!!!!!!!!!!';cr.! !