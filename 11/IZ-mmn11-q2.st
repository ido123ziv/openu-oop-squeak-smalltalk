Object subclass: #MyPrism	instanceVariableNames: 'base height'	classVariableNames: ''	poolDictionaries: ''	category: 'IZ-mmn11-q2'!!MyPrism commentStamp: 'IZ 12/23/2023 18:56' prior: 0!A MyPrism is a 3d shape with base of MyShape and height.Instance Variables	base:		MyShape	height:		int of height of the Prismbase	- xxxxxheight	- xxxxx!!MyPrism methodsFor: 'comparing' stamp: 'IZ 12/23/2023 18:47'!= anObject	"compare prism"	(anObject isMemberOf: MyPrism)	ifTrue: [		((anObject base) isKindOf: MyShape)		ifTrue: [			((height = (anObject height)) and: (base = (anObject base)))			ifTrue: [^true]			ifFalse: [^false].			]		ifFalse: [^False].		]	ifFalse: [^False].! !!MyPrism methodsFor: 'comparing' stamp: 'IZ 12/23/2023 18:05'!hash	"Hash is impelented because = is implemented."	^(((base area) hash hashMultiply + (base perimeter) hash) hashMultiply + height hash) hashMultiply! !!MyPrism methodsFor: 'accessing' stamp: 'IZ 12/23/2023 18:41'!base: aBase 	"set base "	(aBase isKindOf: MyShape)	ifTrue: [	base := aBase]	ifFalse: [self error: 'Init error with base input'].! !!MyPrism methodsFor: 'accessing' stamp: 'IZ 12/23/2023 18:27'!height: aHeight 	"set height "	(aHeight<=0)	ifTrue: [self error: 'init error with height']	ifFalse:	[height := aHeight ].! !!MyPrism methodsFor: 'initialize-release' stamp: 'IZ 12/23/2023 18:08'!initialize	"new object"		base := height := 0.	! !!MyPrism methodsFor: 'getting' stamp: 'IZ 12/23/2023 18:03'!base	"get base"	^base! !!MyPrism methodsFor: 'getting' stamp: 'IZ 12/23/2023 18:03'!height 	"get height "	^height ! !!MyPrism methodsFor: 'getting' stamp: 'IZ 12/23/2023 18:27'!surfaceArea	"get surfaceArea"	(base isKindOf: MyShape)	ifTrue: [^(height * (base perimeter))]	ifFalse: [self error: 'Error with Base'].! !!MyPrism methodsFor: 'getting' stamp: 'IZ 12/23/2023 18:27'!volume	"get volume"	(base isKindOf: MyShape)	ifTrue: [^(height * (base area))]	ifFalse: [self error: 'Error with Base'].! !TestCase subclass: #TestMyPrism	instanceVariableNames: 'r1 r2 t1 t2 p1 p2 p3 p4'	classVariableNames: ''	poolDictionaries: ''	category: 'IZ-mmn11-q2'!!TestMyPrism methodsFor: 'testing' stamp: 'IZ 12/23/2023 18:43'!setUp	"setUp tests for my prism"	Transcript clear.	Transcript show:'Running Prism Tests!!!!!!!!';cr.	t1 := MyTriangle new.	t1		d1: 3;		d2: 4;		d3: 5.	t1 print: 't1'.	t2 := MyTriangle new.	t2		d1: 4;		d2: 5;		d3: 3.	t2 print: 't2'.	r1 := MyRectangle new.	r1		width: 6;		length: 7.	r1 print: 'r1'.	r2 := MyRectangle new.	r2		width: 7;		length: 6.	r2 print: 'r2'.	p1 := MyPrism new.	p1		base: t1;		height: 6.	(p1 base) print: 'base'.	p2 := MyPrism new.	p2		base: t2;		height: 6.	(p2 base) print: 'base'.	p3 := MyPrism new.	p3		base: r1;		height: 12.	(p3 base) print: 'base'.	p4 := MyPrism new.	p4		base: r2;		height: 12.	(p4 base) print: 'base'.	! !!TestMyPrism methodsFor: 'testing' stamp: 'IZ 12/23/2023 18:47'!testAdd	"asserting real tests for prism!!"	Transcript show:'Running basic init Prism Tests!!!!!!!!';cr.	self assert: ((p1 height ) = 6 ) description: 'Error in MyPrism Init 1'.	self assert: (((p2 base ) area )= (t2 area) ) description: 'Error in MyPrism Init 2'.	self assert: (((p3 base ) perimeter) = (r1 perimeter) ) description: 'Error in MyPrism Init 3'.	Transcript show:'Running calc Prism Tests!!!!!!!!';cr.	self assert: ((p1 volume) = (6 * (t1 area))) description: 'Error in MyPrism area!!!!'.	self assert: ((p4 surfaceArea) = (12* (r2 perimeter))) description: 'Error in MyPrism perimeter!!!!'.	Transcript show:'Running compare Prism Tests!!!!!!!!';cr.	self assert: (p1 = p2) description: 'Error in comparing MyPrism!!!! 1'.	self assert: (p3 = p4) description: 'Error in comparing MyPrism!!!! 2'.	Transcript show:'All Tests Completed!!!!!!!!';cr.! !